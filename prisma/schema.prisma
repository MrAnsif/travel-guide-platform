generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// This model contains an expression index which requires additional setup for migrations. Visit https://pris.ly/d/expression-indexes for more info.
model Place {
  id                    String              @id @default(uuid())
  slug                  String              @unique
  name                  String
  description           String              @default("Travel destination information") // Added required field with default
  shortDescription      String?             @map("short_description") // Made optional
  placeType             String              @map("place_type")
  country               String
  state                 String?
  city                  String
  latitude              Float? // Made optional in case coordinates unavailable
  longitude             Float? // Made optional in case coordinates unavailable
  population            Int?
  timezone              String? // Made optional
  languages             String[]
  currency              String?
  overviewImage         String?             @map("overview_image")
  overviewThumbnail     String?             @map("overview_thumbnail") // Made optional
  attractions           String[] // Changed to array
  transportationMethods String[]            @map("transportation_methods") // Changed to array
  emergencyNumber       String?             @map("emergency_number")
  aiGenerated           Boolean             @default(false) @map("ai_generated") // Added field
  generationStatus      String?             @map("generation_status") // Added field
  lastVerified          DateTime?           @map("last_verified") // Added field
  createdAt             DateTime            @default(now()) @map("created_at")
  updatedAt             DateTime            @updatedAt @map("updated_at")
  aiContent             AIGeneratedContent?

  @@index([city(ops: raw("gin_trgm_ops"))], map: "idx_places_city_trgm", type: Gin)
  @@index([country(ops: raw("gin_trgm_ops"))], map: "idx_places_country_trgm", type: Gin)
  @@index([name(ops: raw("gin_trgm_ops"))], map: "idx_places_name_trgm", type: Gin)
  @@map("places")
}

model AIGeneratedContent {
  id                    String   @id @default(uuid())
  placeId               String   @unique @map("place_id")
  generatedDescription  String?  @map("generated_description")
  bestTimeToVisit       String?  @map("best_time_to_visit")
  averageStayDuration   String?  @map("average_stay_duration") // Added missing field
  popularWith           String[]
  cultureDos            String[] @map("culture_dos")
  cultureDonts          String[] @map("culture_donts")
  cultureCustoms        String[] @map("culture_customs")
  diningEtiquette       String?  @map("dining_etiquette")
  publicEtiquette       String?  @map("public_etiquette")
  businessEtiquette     String?  @map("business_etiquette")
  safetyRating          Float?   @map("safety_rating")
  interpretedCrimeRate  Json?    @map("interpreted_crime_rate")  
  commonRisks           String[]
  safetyRecommendations String[] @map("safety_recommendations")
  transportationTips    String[] @map("transportation_tips")
  lastGenerated         DateTime @default(now()) @map("last_generated")
  sourceHash            String?  @map("source_hash")
  place                 Place    @relation(fields: [placeId], references: [id], onDelete: Cascade)

  @@map("ai_generated_content")
}
